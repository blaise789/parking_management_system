generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum SlotType {
  STANDARD
  COMPACT
  HANDICAPPED
  EV_CHARGING
  RESERVED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Role {
  ADMIN
  DRIVER
  CLERK
}

model User {
  id                   String              @id @default(uuid())
  firstName            String
  lastName             String
  email                String              @unique
  telephone            String?
  password             String
  profilePicture       File?               @relation(fields: [profilePictureId], references: [id])
  profilePictureId     String?             @map("profile_picture_id")
  role                 Role?
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  companyId            String?
  assignedLots         ParkingLot[]        @relation("AssignedClerks")
  vehicle              Vehicle[]
  Reservation          Reservation[]
  Ticket               Ticket[]

  @@map("users")
}

model File {
  id           String   @id @default(uuid())
  name         String
  originalName String   @map("original_name")
  url          String
  folder       String
  type         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  users        User[]

  @@map("files")
}

model ParkingLot {
  id             Int           @id @default(autoincrement())
  name           String
  capacity       Int
  // Stores { open: "08:00", close: "20:00" }
  openingTime String @map("opening_time")
  closingTime String @map("closing_time")
  isActive       Boolean       @default(true)
  slots          ParkingSlot[]
  reservations   Reservation[]
  clerks         User[]        @relation("AssignedClerks")
}

model ParkingSlot {
  id           Int           @id @default(autoincrement())
  slotNumber   String
  type         SlotType      @default(STANDARD)
  lot          ParkingLot    @relation(fields: [lotId], references: [id])
  lotId        Int
  reservations Reservation[]
}

model Vehicle {
  id           Int           @id @default(autoincrement())
  licensePlate String        @unique
  make         String?
  model        String?
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  reservations Reservation[]
}

model Reservation {
  id        Int               @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  status    ReservationStatus @default(PENDING)
  vehicle   Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId Int
  slot      ParkingSlot?      @relation(fields: [slotId], references: [id])
  slotId    Int?
  lot       ParkingLot?        @relation(fields: [lotId], references: [id])
  lotId     Int?
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Ticket {
  id            Int         @id @default(autoincrement())
  issueTime     DateTime    @default(now())
  returnTime    DateTime?
  fee           Float?
  status        String      @default("ACTIVE")
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int         @unique
  issuedBy      User        @relation(fields: [clerkId], references: [id])
  clerkId       String
}
