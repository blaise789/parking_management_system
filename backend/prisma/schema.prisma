generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}
enum Role {
  ADMIN
  DRIVER
  CLERK
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK

  @@map("vehicle_type")
}

enum VehicleSize {
  SMALL
  MEDIUM
  LARGE

  @@map("vehicle_size")
}

enum SlotStatus {
  AVAILABLE
  UNAVAILABLE

  @@map("slot_status")
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("reservation_status")
}

enum ParkingLocation {
  NORTH
  SOUTH
  EAST
  WEST

  @@map("parking_location")
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role?     @default(DRIVER)
  vehicles  Vehicle[]

  telephone            String?
  profilePicture       File?               @relation(fields: [profilePictureId], references: [id])
  profilePictureId     String?             @map("profile_picture_id")
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
 
  companyId            String?

  reservations Reservation[]
  logs         Log[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("users")
}

model Vehicle {
  id           Int        @id @default(autoincrement())
  userId       String        @map("user_id")
  plateNumber  String        @unique @map("plate_number")
  vehicleType  VehicleType   @map("vehicle_type")
  size         VehicleSize
  attributes   Json? // For storing additional details like color, model, etc.
  user         User          @relation(fields: [userId], references: [id])
  reservations Reservation[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("vehicles")
}

model ParkingSlot {
  id           String          @id @default(uuid())
  slotNumber   String          @unique @map("slot_number")
  size         VehicleSize
  vehicleType  VehicleType     @map("vehicle_type")
  location     ParkingLocation
  status       SlotStatus      @default(AVAILABLE)
  reservations Reservation[]
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  @@map("parking_slots")
}

model Reservation {
  id          String            @id @default(uuid())
  userId      String            @map("user_id")
  vehicleId   Int         @map("vehicle_id")
  slotId      String?           @map("slot_id")
  slotNumber  String?           @map("slot_number")
  status      ReservationStatus @default(PENDING)
  user        User              @relation(fields: [userId], references: [id])
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id])
  parkingSlot ParkingSlot?      @relation(fields: [slotId], references: [id])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  expiration DateTime?

  @@map("reservations")
}

model Log {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  action    String
  details   Json?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("logs")
}

model File {
  id           String   @id @default(uuid())
  name         String
  originalName String   @map("original_name")
  url          String
  folder       String
  type         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  users        User[]

  @@map("files")
}
enum PaymentStatus {
  PAID
  PENDING

}

enum PaymentMethod {
  CARD
  CASH
  MOBILE
  
}
